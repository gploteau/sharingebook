[{"C:\\Dev\\sharingebook\\src\\app\\components\\player.js":"1","C:\\Dev\\sharingebook\\src\\app\\components\\tracksList.js":"2","C:\\Dev\\sharingebook\\src\\app\\layout.js":"3","C:\\Dev\\sharingebook\\src\\app\\page.js":"4","C:\\Dev\\sharingebook\\src\\pages\\api\\files.js":"5","C:\\Dev\\sharingebook\\src\\utils\\cookies.js":"6"},{"size":16118,"mtime":1688425145089,"results":"7","hashOfConfig":"8"},{"size":1353,"mtime":1688424483137,"results":"9","hashOfConfig":"8"},{"size":480,"mtime":1688402550056,"results":"10","hashOfConfig":"8"},{"size":2076,"mtime":1688424114385,"results":"11","hashOfConfig":"8"},{"size":1729,"mtime":1688421484675,"results":"12","hashOfConfig":"8"},{"size":470,"mtime":1688328199959,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"1wrk6gz",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Dev\\sharingebook\\src\\app\\components\\player.js",["35","36","37","38"],[],"'use client';\r\nimport React, {useEffect, useLayoutEffect, useRef, useState} from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlay } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPause } from '@fortawesome/free-solid-svg-icons'\r\nimport { faBackward } from '@fortawesome/free-solid-svg-icons'\r\nimport { faForward } from '@fortawesome/free-solid-svg-icons'\r\nimport TracksList from \"@/app/components/tracksList\";\r\nimport './player.scss'\r\n\r\nimport HeartIcon from 'public/assets/icons/heart-icon.svg';\r\n\r\nimport HandleIcon from 'public/assets/icons/handle-13.svg';\r\nimport HandleDownIcon from 'public/assets/icons/handle-14.svg';\r\n\r\nimport NextTrackIcon from 'public/assets/icons/control-icon-12.svg';\r\nimport PrevTrackIcon from 'public/assets/icons/control-icon-11.svg';\r\nimport PlayTrackIcon from 'public/assets/icons/control-icon-10.svg';\r\nimport PauseTrackIcon from 'public/assets/icons/control-icon-09.svg';\r\n\r\nimport SpeakerIcon from 'public/assets/icons/volume-icon-15.svg';\r\nimport SpeakerMuteIcon from 'public/assets/icons/volume-icon-muted-15.svg';\r\n\r\nimport TrackListIcon from 'public/assets/icons/bottom-icons-20.svg';\r\nimport LoopIcon from 'public/assets/icons/bottom-icons-21.svg';\r\nimport ShuffleIcon from 'public/assets/icons/bottom-icons-22.svg';\r\n\r\n// eslint-disable-next-line\r\nNumber.prototype.toHHMMSS = function () {\r\n    // snippet taken from stackoverflow\r\n    let sec_num = parseInt(this, 10); // don't forget the second param\r\n    let hours   = Math.floor(sec_num / 3600);\r\n    let minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    let seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    if (hours   < 10) {hours   = \"0\"+hours;}\r\n    if (minutes < 10) {minutes = \"0\"+minutes;}\r\n    if (seconds < 10) {seconds = \"0\"+seconds;}\r\n    return (hours>0?hours+':':\"\")+minutes+':'+seconds;\r\n}\r\n\r\nexport default function Player() {\r\n\r\n    const [audio, setAudio] = useState(null)\r\n    const [volume, setVolume] = useState(0.5)\r\n    const [progress, setProgress] = useState(0)\r\n    const [newProgress, setNewProgress] = useState(0)\r\n    const [trackListOpened, setTrackListOpened] = useState(false)\r\n    const [data, setData] = useState(null)\r\n    const [isLoading, setLoading] = useState(false)\r\n    const [index, setIndex] = useState(0);\r\n    const [pause, setPause] = useState(true);\r\n    const [currentTime, setCurrentTime] = useState('00:00');\r\n    const [duration, setDuration] = useState('00:00');\r\n    const [currentSong, setCurrentSong] = useState({name:'', author: '', cover: '', file:'', duration: ''})\r\n    const [musicList, setMusicList] = useState([]);\r\n    const audioTag = useRef()\r\n\r\n    const refHandleVolume = useRef(null);\r\n    const refVolumeBarCtrl = useRef(null);\r\n    const [volumeHandleLeft, setVolumeHandleLeft] = useState(0);\r\n    const [volumeBarSize, setVolumeBarSize] = useState(0);\r\n    const [handleVolumeDown, setHandleVolumeDown] = useState(false);\r\n\r\n    const refHandleProgress = useRef(null);\r\n    const refProgressBar = useRef(null);\r\n    const [progressHandleLeft, setProgressHandleLeft] = useState(0);\r\n    const [progressBarSize, setProgressBarSize] = useState(0);\r\n    const [handleProgressDown, setHandleProgressDown] = useState(false);\r\n    const [spannedTime, setSpannedTime] = useState('');\r\n\r\n    const [audioLoop, setAudioLoop] = useState(false);\r\n    const [audioShuffle, setAudioShuffle] = useState(false);\r\n\r\n    const resizeComponents = () => {\r\n        const { width:volumeBarWidth } = refVolumeBarCtrl.current.getBoundingClientRect();\r\n        setVolumeHandleLeft(volumeBarWidth * volume);\r\n        setVolumeBarSize(volumeBarWidth - volumeBarWidth * volume)\r\n\r\n        const { width:progressBarWidth } = refProgressBar.current.getBoundingClientRect();\r\n        if(!handleProgressDown) {\r\n            setProgressHandleLeft(progressBarWidth * progress / 100);\r\n            setProgressBarSize(progressBarWidth - progressBarWidth * progress / 100)\r\n        }\r\n\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        resizeComponents();\r\n    }, []);\r\n\r\n    const getTracks = async () => {\r\n        const res = await fetch('/api/files')\r\n        return res.json()\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(musicList.length === 0) {\r\n            setLoading(true)\r\n            getTracks()\r\n                .then((data) => {\r\n                    console.log(data);\r\n                    setCurrentSong(data[0]);\r\n                    setMusicList(data)\r\n                    setLoading(false)\r\n                })\r\n        }\r\n\r\n        if(audio !== null){\r\n            audio.volume = volume;\r\n        }\r\n\r\n        if(audio !== null && newProgress !== 0 && !handleProgressDown) {\r\n            audio.currentTime = audio.duration * newProgress / 100;\r\n            setNewProgress(0);\r\n            setProgress(newProgress);\r\n        }\r\n\r\n        if (pause) {\r\n            if(audio !== null) audio.pause();\r\n        } else {\r\n\r\n            if(audio === null) {\r\n                let newAudio = new Audio(musicList[index].file)\r\n                newAudio.currentTime = 0;\r\n                newAudio.volume = volume;\r\n                newAudio.preload = true;\r\n                newAudio.autoplay = true;\r\n                newAudio.loop = audioLoop;\r\n\r\n                newAudio.addEventListener('ended', () => {\r\n                    if(!audioLoop) {\r\n                        if(audioShuffle) {\r\n                            clickAudio(Math.floor(Math.random() * musicList.length));\r\n                        } else {\r\n                            nextSong();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                newAudio.addEventListener('timeupdate', () => {\r\n                    if(!newProgress && !handleProgressDown) setProgress(newAudio.currentTime / newAudio.duration * 100);\r\n                    setCurrentTime(newAudio.currentTime.toHHMMSS());\r\n                    setDuration(newAudio.duration.toHHMMSS());\r\n\r\n                });\r\n\r\n                setAudio(newAudio);\r\n                setCurrentSong(musicList[index]);\r\n            } else {\r\n                audio.loop = audioLoop;\r\n                audio.play();\r\n            }\r\n        }\r\n\r\n        function updateSize() {\r\n            resizeComponents();\r\n        }\r\n\r\n        resizeComponents();\r\n\r\n        window.addEventListener('resize', updateSize);\r\n\r\n    }, [index, pause, volume, progress, audioLoop]);\r\n\r\n    const playOrPause = () => {\r\n        setPause(!pause);\r\n    }\r\n\r\n    const prevSong = () => {\r\n        if (index === 0) {\r\n            clickAudio(musicList.length - 1);\r\n        } else {\r\n            clickAudio(index - 1);\r\n        }\r\n    }\r\n\r\n    const nextSong = () => {\r\n        if (index === musicList.length - 1) {\r\n            clickAudio(0);\r\n        } else {\r\n            clickAudio(index + 1);\r\n        }\r\n    }\r\n\r\n    function clickAudio(key) {\r\n        if(key === index){\r\n            playOrPause();\r\n            return;\r\n        }\r\n        if(audio !== null) audio.pause();\r\n        setAudio(null);\r\n        setIndex(key);\r\n        setPause(false);\r\n        setTimeout(() => {\r\n            setTrackListOpened(false)\r\n        }, 500);\r\n    }\r\n\r\n    const calculateProgress = (touchPosition) => {\r\n        const { width } = refProgressBar.current.getBoundingClientRect();\r\n        const newPosition = touchPosition - ((window.innerWidth - width) / 2)\r\n\r\n        if(newPosition < 0) return;\r\n        if(newPosition > width) return;\r\n\r\n        const { width:progressBarWidth } = refProgressBar.current.getBoundingClientRect();\r\n\r\n        if(audio !== null){\r\n            setSpannedTime(( audio.duration / progressBarWidth * newPosition).toHHMMSS());\r\n        }\r\n\r\n        let newProgress = parseFloat(1.0 / width) * parseFloat(newPosition);\r\n        setProgress(newProgress * 100);\r\n        setNewProgress(newProgress * 100);\r\n        setProgressHandleLeft(width * newProgress);\r\n    }\r\n\r\n    const progressBarPickHandler = (e) => {\r\n        let touchPosition = 0;\r\n        if (e.type === 'mousedown') {\r\n            touchPosition = e.pageX;\r\n            document.addEventListener('mousemove', progressBarMoveHandler);\r\n            document.addEventListener('mouseup', progressBarDropHandler);\r\n            setHandleProgressDown(true);\r\n        } else if (e.type === 'touchstart') {\r\n            touchPosition = e.touches[0].pageX;\r\n            e.target.addEventListener('touchmove', progressBarMoveHandler);\r\n            e.target.addEventListener('touchend', progressBarDropHandler);\r\n            setHandleProgressDown(true);\r\n        }\r\n\r\n        calculateProgress(touchPosition);\r\n    }\r\n\r\n\r\n    const progressBarMoveHandler = (e) => {\r\n        let touchPosition = 0;\r\n        if (e.type === 'mousemove') {\r\n            touchPosition = e.pageX;\r\n            document.addEventListener('mouseup', progressBarDropHandler);\r\n        } else if (e.type === 'touchmove') {\r\n            touchPosition = e.touches[0].pageX;\r\n            e.target.addEventListener('touchend', progressBarDropHandler);\r\n        }\r\n\r\n        calculateProgress(touchPosition);\r\n    }\r\n\r\n    const progressBarDropHandler = (e) => {\r\n        setHandleProgressDown(false);\r\n        setSpannedTime('')\r\n        e.target.removeEventListener('touchmove', progressBarMoveHandler);\r\n        e.target.removeEventListener('touchend', progressBarDropHandler);\r\n        document.removeEventListener('mousemove', progressBarMoveHandler);\r\n        document.removeEventListener('mouseup', progressBarDropHandler);\r\n    }\r\n\r\n    const calculateVolume = (touchPosition) => {\r\n        const { width } = refVolumeBarCtrl.current.getBoundingClientRect();\r\n        const newPosition = touchPosition - ((window.innerWidth - width) / 2)\r\n        if(newPosition < 0) return;\r\n        if(newPosition > width) return;\r\n\r\n        setVolumeHandleLeft(newPosition)\r\n        setVolumeBarSize(width - newPosition)\r\n        let newVolume = (parseFloat(1.0 / width) * parseFloat(newPosition)).toFixed(2)\r\n        setVolume(newVolume);\r\n    }\r\n\r\n    const volumeBarPickHandler = (e) => {\r\n        let touchPosition = 0;\r\n        if (e.type === 'mousedown') {\r\n            touchPosition = e.pageX;\r\n            document.addEventListener('mousemove', volumeBarMoveHandler);\r\n            document.addEventListener('mouseup', volumeBarDropHandler);\r\n            setHandleVolumeDown(true);\r\n        } else if (e.type === 'touchstart') {\r\n            touchPosition = e.touches[0].pageX;\r\n            e.target.addEventListener('touchmove', volumeBarMoveHandler);\r\n            e.target.addEventListener('touchend', volumeBarDropHandler);\r\n            setHandleVolumeDown(true);\r\n        }\r\n\r\n        calculateVolume(touchPosition);\r\n    }\r\n\r\n    const volumeBarMoveHandler = (e) => {\r\n        let touchPosition = 0;\r\n        if (e.type === 'mousemove') {\r\n            touchPosition = e.pageX;\r\n            document.addEventListener('mouseup', volumeBarDropHandler);\r\n        } else if (e.type === 'touchmove') {\r\n            touchPosition = e.touches[0].pageX;\r\n            e.target.addEventListener('touchend', volumeBarDropHandler);\r\n        }\r\n\r\n        calculateVolume(touchPosition);\r\n    }\r\n\r\n    const volumeBarDropHandler = (e) => {\r\n        setHandleVolumeDown(false);\r\n        e.target.removeEventListener('touchmove', volumeBarMoveHandler);\r\n        e.target.removeEventListener('touchend', volumeBarDropHandler);\r\n        document.removeEventListener('mousemove', volumeBarMoveHandler);\r\n        document.removeEventListener('mouseup', volumeBarDropHandler);\r\n    }\r\n\r\n    const mutePlayer = () => {\r\n        setVolume(0);\r\n    }\r\n\r\n    return (\r\n        <div className=\"player\">\r\n            <TracksList opened={trackListOpened} close={() => setTrackListOpened(!trackListOpened)} tracks={musicList} current={index} setCurrent={clickAudio}/>\r\n            <div className=\"ctr-1\"><p className=\"play-pause-text\"><strong>{pause ? 'PAUSED' : 'PLAYING'}</strong><span>{currentTime} / {duration}</span></p>\r\n                <button className=\"heart-icon\">\r\n                    <HeartIcon />\r\n                </button>\r\n            </div>\r\n            <p className=\"track-title\" title={currentSong.title || 'No title'}>{isLoading ? 'Loading...' : currentSong.title || 'No title'}</p>\r\n            {currentSong.author ? <p className=\"track-author\" title={currentSong.author}>{currentSong.author}</p> : null}\r\n            <div className=\"cover-container\">\r\n                <img src={isLoading ? '' : currentSong.cover} height={200} />\r\n            </div>\r\n            <div className=\"bottom-ctr\">\r\n                <div className=\"progress-container\"\r\n                     onTouchStart={progressBarPickHandler}\r\n                     onMouseDown={progressBarPickHandler}\r\n                >\r\n                    <div className=\"progress-bar\" ref={refProgressBar}>\r\n                        <div className=\"done\" id=\"doneProgressBar\" style={{right: progressBarSize}}></div>\r\n                        <div className=\"remaining\"></div>\r\n                    </div>\r\n                    <div className=\"handle-ctr\" style={{left: progressHandleLeft}}>\r\n                        <p className=\"time-span\">\r\n                            {spannedTime ? spannedTime : currentTime}\r\n                            <span></span>\r\n                        </p>\r\n                        <button className=\"handle\">\r\n                            {handleProgressDown ? <HandleDownIcon /> : <HandleIcon />}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"control-icons-container\">\r\n                    <button className=\"play-control prev-track-btn-ctr\" onClick={prevSong}>\r\n                        <PrevTrackIcon />\r\n                    </button>\r\n                    <button className=\"play-control play-pause-container\" onClick={playOrPause}>\r\n                        {pause ? <PlayTrackIcon /> : <PauseTrackIcon />}\r\n                    </button>\r\n                    <button className=\"play-control next-track-btn-ctr\" onClick={nextSong}>\r\n                        <NextTrackIcon />\r\n                    </button>\r\n                </div>\r\n                <div className=\"volume-container\"\r\n                     onTouchStart={volumeBarPickHandler}\r\n                     onMouseDown={volumeBarPickHandler}\r\n                >\r\n                    <div className=\"volume-icon-ctr\">\r\n                        <button className=\"speaker-icon\" onClick={mutePlayer}>\r\n                            {volume < 0.01 ? <SpeakerMuteIcon/> : <SpeakerIcon />}\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"volume-bar-ctr\" ref={refVolumeBarCtrl}>\r\n                        <div className=\"volume-bar\">\r\n                            <div className=\"done\" style={{right: volumeBarSize}}></div>\r\n                            <div className=\"remaining\"></div>\r\n                        </div>\r\n                        <div className=\"handle-ctr\" ref={refHandleVolume} style={{left: volumeHandleLeft}}>\r\n                            <button className=\"handle\" style={{backgroundColor: handleVolumeDown ? '#333' : '#f0f8ff'}}></button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"volume-pctg-ctr\">\r\n                        <span>{parseInt(volume * 100, 10)}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bottom-icons-ctr\">\r\n                    <button className=\"tracks-list-btn\" onClick={() => setTrackListOpened(!trackListOpened)}>\r\n                        <TrackListIcon />\r\n                    </button>\r\n                    <button className=\"loop-btn\" onClick={() => setAudioLoop(!audioLoop)}>\r\n                        <LoopIcon style={{opacity: audioLoop ? 1 : 0.6}} />\r\n                    </button>\r\n                    <button className=\"shuffle-btn\" onClick={() => setAudioShuffle(!audioShuffle)}>\r\n                        <ShuffleIcon style={{opacity: audioShuffle ? 1 : 0.6}} />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n","C:\\Dev\\sharingebook\\src\\app\\components\\tracksList.js",[],[],"C:\\Dev\\sharingebook\\src\\app\\layout.js",[],[],"C:\\Dev\\sharingebook\\src\\app\\page.js",["39"],[],"'use client';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay } from '@fortawesome/free-solid-svg-icons'\nimport { faPause } from '@fortawesome/free-solid-svg-icons'\nimport { faBackward } from '@fortawesome/free-solid-svg-icons'\nimport { faForward } from '@fortawesome/free-solid-svg-icons'\nimport Player from './components/player';\n\n\nexport default function Home() {\n\n  const [data, setData] = useState(null)\n  const [isLoading, setLoading] = useState(false)\n  const [index, setIndex] = useState(0);\n  const [pause, setPause] = useState(true);\n  const [currentTime, setCurrentTime] = useState('0:00');\n  const [duration, setDuration] = useState('0:00');\n  const [currentSong, setCurrentSong] = useState({name:'', author: '', cover: '', file:'', duration: ''})\n  const [musicList, setMusicList] = useState([]);\n  const audioTag = useRef()\n\n  const getTracks = async () => {\n    const res = await fetch('/api/files')\n    return res.json()\n  }\n\n  useEffect(() => {\n    if(musicList.length === 0) {\n      setLoading(true)\n      getTracks()\n          .then((data) => {\n            console.log(data);\n            setCurrentSong(data[0]);\n            setMusicList(data)\n            setLoading(false)\n          })\n    }\n\n    if(audioTag.current) {\n      if (pause) {\n        audioTag.current.pause();\n      } else {\n        audioTag.current = new Audio(musicList[index].audio);\n        audioTag.current.play();\n      }\n    }\n  }, [index,pause]);\n\n  const playOrPause = () => {\n    setPause(!pause);\n  }\n\n  const prevSong = () => {\n    if (index === 0) {\n      clickAudio(musicList.length - 1);\n    } else {\n      clickAudio(index - 1);\n    }\n  }\n\n  const nextSong = () => {\n    if (index === musicList.length - 1) {\n      clickAudio(0);\n    } else {\n      clickAudio(index + 1);\n    }\n  }\n\n  function clickAudio(key) {\n    if(key === index){\n      playOrPause();\n      return;\n    }\n    audioTag.current.pause();\n    setIndex(key);\n    setPause(false);\n  }\n\n  return (\n    <Player />\n  );\n}\n","C:\\Dev\\sharingebook\\src\\pages\\api\\files.js",["40"],[],"import fs from 'fs'\r\nimport path from 'path'\r\nimport * as mm from 'music-metadata';\r\nconst { getAudioDurationInSeconds } = require('get-audio-duration')\r\n\r\nconst getTracks = async () => {\r\n\r\n    const dirRelativeToPublicFolder = 'sound';\r\n\r\n    const db_file = path.resolve('./public', 'db.json');\r\n\r\n    let db = [];\r\n\r\n    if(fs.existsSync(db_file)) {\r\n        db = JSON.parse(fs.readFileSync(db_file));\r\n    }\r\n\r\n    const dir = path.resolve('./public', dirRelativeToPublicFolder);\r\n\r\n    const filenames = fs.readdirSync(dir);\r\n\r\n    if(filenames.length === db.length) {\r\n        return db;\r\n    }\r\n\r\n    const tracks = await Promise.all(filenames.map(name => {\r\n        path.join('/', dirRelativeToPublicFolder, name)\r\n        const metaData = mm.parseFile(path.join(dir, name));\r\n        const duration = getAudioDurationInSeconds(path.join(dir, name));\r\n\r\n        return duration.then((duration) => {\r\n            return metaData.then((metadata) => {\r\n\r\n                let cover = metadata.common.picture ?\r\n                    'data:' + metadata.common.picture[0].format + ';base64,' + Buffer.from(metadata.common.picture[0].data).toString('base64') : ''\r\n\r\n                return {\r\n                    duration: duration,\r\n                    file: path.join('/', dirRelativeToPublicFolder, name),\r\n                    title: metadata.common.title || name,\r\n                    author: metadata.common.artist,\r\n                    cover : cover\r\n                };\r\n            });\r\n        })\r\n    }));\r\n\r\n    fs.writeFileSync(db_file, JSON.stringify(tracks));\r\n\r\n    return tracks;\r\n}\r\n\r\nexport default async (req, res) => {\r\n\r\n    const images = await getTracks();\r\n\r\n    return res.status(200).json(images);\r\n\r\n}\r\n","C:\\Dev\\sharingebook\\src\\utils\\cookies.js",[],[],{"ruleId":"41","severity":1,"message":"42","line":90,"column":8,"nodeType":"43","endLine":90,"endColumn":10,"suggestions":"44"},{"ruleId":"41","severity":1,"message":"45","line":165,"column":8,"nodeType":"43","endLine":165,"endColumn":51,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":325,"column":17,"nodeType":"49","endLine":325,"endColumn":78},{"ruleId":"50","severity":1,"message":"51","line":325,"column":17,"nodeType":"49","endLine":325,"endColumn":78},{"ruleId":"41","severity":1,"message":"52","line":48,"column":6,"nodeType":"43","endLine":48,"endColumn":19,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":53,"column":1,"nodeType":"56","endLine":59,"endColumn":2},"react-hooks/exhaustive-deps","React Hook useLayoutEffect has a missing dependency: 'resizeComponents'. Either include it or remove the dependency array.","ArrayExpression",["57"],"React Hook useEffect has missing dependencies: 'audio', 'audioShuffle', 'clickAudio', 'handleProgressDown', 'musicList', 'newProgress', 'nextSong', and 'resizeComponents'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrentSong' needs the current value of 'musicList'.",["58"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'musicList'. Either include it or remove the dependency array.",["59"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},"Update the dependencies array to be: [resizeComponents]",{"range":"66","text":"67"},"Update the dependencies array to be: [index, pause, volume, progress, audioLoop, musicList, audio, newProgress, handleProgressDown, resizeComponents, audioShuffle, clickAudio, nextSong]",{"range":"68","text":"69"},"Update the dependencies array to be: [index, musicList, pause]",{"range":"70","text":"71"},[4062,4064],"[resizeComponents]",[6359,6402],"[index, pause, volume, progress, audioLoop, musicList, audio, newProgress, handleProgressDown, resizeComponents, audioShuffle, clickAudio, nextSong]",[1515,1528],"[index, musicList, pause]"]